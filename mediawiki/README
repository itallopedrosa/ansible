This repository contains ansible playbooks for installing and configuring
MediaWiki wiki farms. A wiki farm can comprise multiple web front end
hosts, referred to as wiki families, each hosting multiple wikis. These
playbooks support either installing MediaWiki and its database on a single
host or splitting them between two tiers.

These playbooks will install MySQL, Apache, Squid, MediaWiki, and MediaWiki
skins/extensions in a single directory hierarchy (possibly separated between
two hosts as described above) and configure SELinux. This directory hierarchy
is self-contained, supporting migration between similarly configured hosts.

The wikis hosted by the wiki farms built by these playbooks will be accessed
over HTTPS with a permanenent redirect to HTTPS if accessed over HTTP. These
playbooks have been tested using ansible 2.0.1.0 to provision CentOS/RedHat 6
and 7 targets.

Each wiki on a wiki family has an instance directory in the INSTANCES
directory that is a sibling the the MediaWiki directory. The instance directory
contains a branding sub-directory containing the logo and favicon as well as
an images directory containing all uploaded files for the wiki. In addition, the
instance directory contains several optional wiki configuration files described
below.

To simplify wiki farm management, the MediaWiki LocalSettings.php
configuration file has been crafted to include a set of role specific
configuration files in a WikiFarm subdirectory of the MediaWiki installation.
Some of these files will be customized for a particular wiki family
(MediaWiki host), while others will be the same across all wiki families in
a wiki farm. This allows, for example, a new global extension configuration
file to be pushed to all wiki families when a new extension is installed
across all wiki families in the wiki farm. In addition, in the instance
configuration directory for each wiki in the wiki family, several wiki-specific
configuration files may exist. The configuration files in the WikiFarm and
instance directories are as follows (all files are optional unless noted
otherwise) in the order in which they are loaded:

* Debug.php
  * debugging flags
* Server.php (mandatory)
  * server-specific configuration (e.g. wiki family base URL)
* Keys.php (mandatory)
  * MediaWiki-generated keys
* Email.php (mandatory)
  * email configuration
* Upload.php (mandatory)
  * file upload configuration
* WikiFamilyPreConfiguration.php
  * pre-extension configuration specific to this wiki family
* Skins.php (mandatory)
  * skin registration and configuration
* Interwiki.php
  * interwiki configuration
* <instance>/Namespaces.php
  * configuration of any wiki-specific namespaces
* <instance>/PreConfiguration.php
  * any wiki-specific configuration that must be done prior to loading the
    extensions
* Authentication.php
  * extension registration and configuration for authentication
* Permissions.php
  * permission configuration
* GlobalExtensions.php
  * extension registration and configuration shared across all wiki families
    in this wiki farm
* LocalExtensions.php
  * extension registration and configuration for the wikis in this wiki family
* <instance>/PostConfiguration.php
  * any wiki-specific configuration that must be done after loading the
    extensions
* WikiFamilyPostConfiguration.php
  * post-extension configuration specific to this wiki family

CONFIGURATION NOTES:

* These playbooks require three variables holding wiki farm passwords to be
  specified: MYSQL_ROOT_PASSWORD, MYSQL_WIKI_PASSWORD, WIKI_ADMIN_PASSWORD.
  These variables may be defined using the --extra-vars (-e) parameter on the
  ansible-playbook command line or may be defined in an ansible variable file
  or ansible vault. The latter would require additional parameters (such as
  --ask-vault-pass or --vault-password-file) to be added to the commands
  below. By default, a file "group_vars/all/config" has been provided with dummy
  values for these variables that must be changed.

* If you need to use specify a proxy, uncomment the PROXY_ENV lines in
  group_vars/all/proxy and set them appropriately.

* There are also some other default values in group_vars/all/config that you may
  want to change to match your environment.

* By default, MediaWiki and many of its extensions are installed from the
  Wikimedia Foundation git repository. However, in some cases dowloads of
  large code bases from that repository through a firewall can stall, so the
  "group_vars/mw_hosts/config" file contains alternative URLs that are commented
  out to install from the github.com mirror. To switch to use the mirror,
  comment out the wikimedia URLs and uncomment the github URLs.

* For each MediaWiki host, a certificate and private key must be provided in an
  ansible-accessible diretory named certs on the ansible host. The files in that
  directory must be named <server name>-private.key and <server name>-site.crt.
  The <server name> part must match the MediaWiki host name as specified in the
  ansible hosts file.

* You must create an ansible hosts file. The hosts.example file is an example.

* You must ensure that the database hosts are listed in the db_hosts section
  and the MediaWiki hosts are listed in the mw_hosts section of the ansible
  hosts file. For example:

  * To place Apache/MediaWiki on <host1> and MySQL on <host2>, add <host1> to
    mw_hosts and <host2> to db_hosts

  * To place MySQL/Apache/MediaWiki all on <host1>, add <host1> to
    db_hosts and mw_hosts

* The group_vars/all/default_extensions file comes preconfigured with a set of
  useful extensions. This serves as a starting point as well as an example
  of how extensions can be specified. This list of extensions can eaily be
  edited or replaced to specify a different set of extensions. The list of
  extensions is placed in a variable, DEFAULT_EXTENSIONS, which is used by the
  install_extensions.yml playbook. Each extension in the list contains the
  following fields (the url and composer fields must not both be used for the
  same extension):

  * name: the name of the extension used to identify the extension directory
    and to register the extension (not used for composer loading)
  * url: if specified, the git URL to install the extension from
  * composer: if specified, the name of the extension for composer installation
  * version: the version of the extension to install (defaults to dev-master for
    composer)
  * enable: either "global" or "local", indicating whether to add extension
    loading and configuration statements to GlobalExtensions.php or
    LocalExtensions.php
  * legacy: if defined and true, specifies that the extension should be
    loaded with the old style (require) rather than the new style
    (wfLoadExtension)
  * composer_update: if defined and true, descend into the extension directory
    and perform a composer update after installing
  * config: a list of configuration statements for the extension to be
    included in GlobalExtensions.php or LocalExtensions.php (see "enable")

* To set up a wiki family to use a shared interwiki table (to facilitate
  transclusion between wikis in a wiki family),
  add the "SHARED_WIKI_DB_NAME=<dbname>" flag when running the add_db_client.yml
  playbook and run the following after installing MediaWiki:

    ansible-playbook configure_shared_interwiki.yml -e "MW_RELEASE=REL1_26 SHARED_WIKI_DB_NAME=<dbname>"

  When choosing a name for the shared wiki database (<dbname> above), be sure
  to choose a name that will never be the name of a wiki on the wiki family
  (e.g. SHARED_WIKI_TABLES).

PLAYBOOK INSTRUCTIONS:

* Perform initial configuration on all hosts:

    ansible-playbook setup.yml -kKbu <username>

  where <username> is the username you will ssh to before sudo'ing on the
  remote host. If you can login directly as root on the remote host,
  you may do the following instead:

    ansible-playbook setup.yml -k

* Configure the database hosts:

    ansible-playbook deploy_db_hosts.yml

* Add a MediaWiki host as a client of a database host; run one of the
  following (adding "SHARED_WIKI_DB_NAME=<dbname>" if you want to have a shared
  interwiki table):

  * To configure <host2>, which is serving as the database host for MediaWiki
    host <host1>:

    ansible-playbook add_db_client.yml -e "MW_HOST=<host1>" -l <host2>

    or

    ansible-playbook add_db_client.yml -e "MW_HOST=<host1> SHARED_WIKI_DB_NAME=<dbname>" -l <host2>

  * To configure <host1>, which is serving as the MediaWiki and database host:

    ansible-playbook add_db_client.yml -e "MW_HOST=<host1>" -l <host1>

    or

    ansible-playbook add_db_client.yml -e "MW_HOST=<host1> SHARED_WIKI_DB_NAME=<dbname>" -l <host1>

* Configure the MediaWiki hosts:

    ansible-playbook deploy_mw_hosts.yml

    ansible-playbook install_mediawiki.yml -e "MW_RELEASE=REL1_26"
      or
    ansible-playbook install_mediawiki.yml -e "MW_RELEASE=REL1_26 DB_HOST=<dbhost>"

    ansible-playbook install_extensions.yml -e "MW_RELEASE=REL1_26"
    ansible-playbook install_skins.yml -e "MW_RELEASE=REL1_26"

  If you want to have a shared interwiki table:

    ansible-playbook configure_shared_interwiki.yml -e "MW_RELEASE=REL1_26 SHARED_WIKI_DB_NAME=<dbname>"

  The steps above can be repeated for multiple MediaWiki releases.

* Create a new wiki; run one of the following:

  * If Apache/MediaWiki is on <host1> and MySQL is on <host2>:

    ansible-playbook create_new_wiki.yml -e "MW_HOST=<host1> DB_HOST=<host2> WIKI_NAME=<name>"

  * If MySQL/Apache/MediaWiki ar all on <host1>:

    ansible-playbook create_new_wiki.yml -e "MW_HOST=<host1> WIKI_NAME=<name>"

  * The new wiki will be available at http://<host1>/<name>

* Clone a wiki from FROM_MW_HOST/FROM_DB_HOST to TO_MW_HOST/TO_DB_HOST with
  optional renaming:

    NOTES:

    * This playbook first pulls the database .sql file and wiki instance
      directory .tar.bz2 file to the controller host from the source host
      and then pushes them to the destination host.

    * If the source and destination environments are different, the two
      playbooks that are invoked by clone_wiki.yml can be called separately:
      clone_wiki_pull.yml and clone_wiki_push.yml.

    * The source database host must have the mysql-python module
      installed. On that host, run:

        yum install python-pip python-devel mysql-devel
        pip install mysql-python

    * If the wiki does not yet exist on the destination host/host pair,
      you must run the create_new_wiki.yml playbook above first to set up the
      database permissions correctly.

    * If FROM_DB_HOST is not specified, it defaults to FROM_MW_HOST.

    * If TO_DB_HOST is not specified, it defaults to TO_MW_HOST.

    * If TO_WIKI_NAME is not specified, it defaults to FROM_WIKI_NAME.

    ansible-playbook clone_wiki.yml -e "FROM_MW_HOST=<host1> FROM_DB_HOST=<host2> TO_MW_HOST=<host3> TO_DB_HOST=<host4> FROM_WIKI_NAME=<oldname> TO_WIKI_NAME=<newname>"

  or

    ansible-playbook clone_wiki.yml -e "FROM_MW_HOST=<host1> TO_MW_HOST=<host2> FROM_WIKI_NAME=<oldname>"

EXAMPLE:

To configure a wikifarm with MediaWiki/Apache/squid installed on host mw1 and
MySQL installed on host db1 using schema SHARED_WIKI_TABLES to hold the shared
interwiki table, and to create a wiki named "testwiki", do the following:

  ansible-playbook setup.yml -k
  ansible-playbook deploy_db_hosts.yml
  ansible-playbook add_db_client.yml -e "MW_HOST=mw1 SHARED_WIKI_DB_NAME=SHARED_WIKI_TABLES" -l db1
  ansible-playbook deploy_mw_hosts.yml
  ansible-playbook install_mediawiki.yml -e "MW_RELEASE=REL1_26 DB_HOST=db1"
  ansible-playbook install_extensions.yml -e "MW_RELEASE=REL1_26"
  ansible-playbook install_skins.yml -e "MW_RELEASE=REL1_26"
  ansible-playbook configure_shared_interwiki.yml -e "MW_RELEASE=REL1_26 SHARED_WIKI_DB_NAME=SHARED_WIKI_TABLES"
  ansible-playbook create_new_wiki.yml -e "MW_HOST=mw1 DB_HOST=db1 WIKI_NAME=testwiki"
